// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/lock/v1alpha1/lock.proto

package v1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _lock_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Lock with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Lock) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Lock with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LockMultiError, or nil if none found.
func (m *Lock) ValidateAll() error {
	return m.validate(true)
}

func (m *Lock) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = LockValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Service

	// no validation rules for Who

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LockValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LockValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LockValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LockMultiError(errors)
	}

	return nil
}

func (m *Lock) _validateUuid(uuid string) error {
	if matched := _lock_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// LockMultiError is an error wrapping multiple validation errors returned by
// Lock.ValidateAll() if the designated constraints aren't met.
type LockMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LockMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LockMultiError) AllErrors() []error { return m }

// LockValidationError is the validation error returned by Lock.Validate if the
// designated constraints aren't met.
type LockValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LockValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LockValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LockValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LockValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LockValidationError) ErrorName() string { return "LockValidationError" }

// Error satisfies the builtin error interface
func (e LockValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLock.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LockValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LockValidationError{}

// Validate checks the field values on CreateLockRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateLockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLockRequestMultiError, or nil if none found.
func (m *CreateLockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Service

	// no validation rules for Who

	if len(errors) > 0 {
		return CreateLockRequestMultiError(errors)
	}

	return nil
}

// CreateLockRequestMultiError is an error wrapping multiple validation errors
// returned by CreateLockRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateLockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLockRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLockRequestMultiError) AllErrors() []error { return m }

// CreateLockRequestValidationError is the validation error returned by
// CreateLockRequest.Validate if the designated constraints aren't met.
type CreateLockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLockRequestValidationError) ErrorName() string {
	return "CreateLockRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLockRequestValidationError{}

// Validate checks the field values on CreateLockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLockResponseMultiError, or nil if none found.
func (m *CreateLockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLock()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateLockResponseValidationError{
					field:  "Lock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateLockResponseValidationError{
					field:  "Lock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLock()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLockResponseValidationError{
				field:  "Lock",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateLockResponseMultiError(errors)
	}

	return nil
}

// CreateLockResponseMultiError is an error wrapping multiple validation errors
// returned by CreateLockResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateLockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLockResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLockResponseMultiError) AllErrors() []error { return m }

// CreateLockResponseValidationError is the validation error returned by
// CreateLockResponse.Validate if the designated constraints aren't met.
type CreateLockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLockResponseValidationError) ErrorName() string {
	return "CreateLockResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLockResponseValidationError{}

// Validate checks the field values on GetLockRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetLockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLockRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetLockRequestMultiError,
// or nil if none found.
func (m *GetLockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetLockRequestMultiError(errors)
	}

	return nil
}

// GetLockRequestMultiError is an error wrapping multiple validation errors
// returned by GetLockRequest.ValidateAll() if the designated constraints
// aren't met.
type GetLockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLockRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLockRequestMultiError) AllErrors() []error { return m }

// GetLockRequestValidationError is the validation error returned by
// GetLockRequest.Validate if the designated constraints aren't met.
type GetLockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLockRequestValidationError) ErrorName() string { return "GetLockRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetLockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLockRequestValidationError{}

// Validate checks the field values on GetLockResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetLockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLockResponseMultiError, or nil if none found.
func (m *GetLockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLock()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLockResponseValidationError{
					field:  "Lock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLockResponseValidationError{
					field:  "Lock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLock()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLockResponseValidationError{
				field:  "Lock",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLockResponseMultiError(errors)
	}

	return nil
}

// GetLockResponseMultiError is an error wrapping multiple validation errors
// returned by GetLockResponse.ValidateAll() if the designated constraints
// aren't met.
type GetLockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLockResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLockResponseMultiError) AllErrors() []error { return m }

// GetLockResponseValidationError is the validation error returned by
// GetLockResponse.Validate if the designated constraints aren't met.
type GetLockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLockResponseValidationError) ErrorName() string { return "GetLockResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetLockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLockResponseValidationError{}

// Validate checks the field values on UnLockRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnLockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnLockRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UnLockRequestMultiError, or
// nil if none found.
func (m *UnLockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnLockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UnLockRequestMultiError(errors)
	}

	return nil
}

// UnLockRequestMultiError is an error wrapping multiple validation errors
// returned by UnLockRequest.ValidateAll() if the designated constraints
// aren't met.
type UnLockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnLockRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnLockRequestMultiError) AllErrors() []error { return m }

// UnLockRequestValidationError is the validation error returned by
// UnLockRequest.Validate if the designated constraints aren't met.
type UnLockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnLockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnLockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnLockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnLockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnLockRequestValidationError) ErrorName() string { return "UnLockRequestValidationError" }

// Error satisfies the builtin error interface
func (e UnLockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnLockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnLockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnLockRequestValidationError{}

// Validate checks the field values on UnLockResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnLockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnLockResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UnLockResponseMultiError,
// or nil if none found.
func (m *UnLockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnLockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if err := m._validateUuid(m.GetId()); err != nil {
		err = UnLockResponseValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Count

	if len(errors) > 0 {
		return UnLockResponseMultiError(errors)
	}

	return nil
}

func (m *UnLockResponse) _validateUuid(uuid string) error {
	if matched := _lock_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UnLockResponseMultiError is an error wrapping multiple validation errors
// returned by UnLockResponse.ValidateAll() if the designated constraints
// aren't met.
type UnLockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnLockResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnLockResponseMultiError) AllErrors() []error { return m }

// UnLockResponseValidationError is the validation error returned by
// UnLockResponse.Validate if the designated constraints aren't met.
type UnLockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnLockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnLockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnLockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnLockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnLockResponseValidationError) ErrorName() string { return "UnLockResponseValidationError" }

// Error satisfies the builtin error interface
func (e UnLockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnLockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnLockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnLockResponseValidationError{}

// Validate checks the field values on ListLocksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListLocksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLocksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLocksRequestMultiError, or nil if none found.
func (m *ListLocksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLocksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPerPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListLocksRequestValidationError{
					field:  "PerPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListLocksRequestValidationError{
					field:  "PerPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPerPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListLocksRequestValidationError{
				field:  "PerPage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListLocksRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListLocksRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListLocksRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListLocksRequestMultiError(errors)
	}

	return nil
}

// ListLocksRequestMultiError is an error wrapping multiple validation errors
// returned by ListLocksRequest.ValidateAll() if the designated constraints
// aren't met.
type ListLocksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLocksRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLocksRequestMultiError) AllErrors() []error { return m }

// ListLocksRequestValidationError is the validation error returned by
// ListLocksRequest.Validate if the designated constraints aren't met.
type ListLocksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLocksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLocksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLocksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLocksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLocksRequestValidationError) ErrorName() string { return "ListLocksRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListLocksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLocksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLocksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLocksRequestValidationError{}

// Validate checks the field values on ListLocksResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListLocksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLocksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLocksResponseMultiError, or nil if none found.
func (m *ListLocksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLocksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLocks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLocksResponseValidationError{
						field:  fmt.Sprintf("Locks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLocksResponseValidationError{
						field:  fmt.Sprintf("Locks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLocksResponseValidationError{
					field:  fmt.Sprintf("Locks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return ListLocksResponseMultiError(errors)
	}

	return nil
}

// ListLocksResponseMultiError is an error wrapping multiple validation errors
// returned by ListLocksResponse.ValidateAll() if the designated constraints
// aren't met.
type ListLocksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLocksResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLocksResponseMultiError) AllErrors() []error { return m }

// ListLocksResponseValidationError is the validation error returned by
// ListLocksResponse.Validate if the designated constraints aren't met.
type ListLocksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLocksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLocksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLocksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLocksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLocksResponseValidationError) ErrorName() string {
	return "ListLocksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLocksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLocksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLocksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLocksResponseValidationError{}
